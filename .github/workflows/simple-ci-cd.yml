name: Simple GitHub Actions CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    env:
      USER: cicd
      VPS_IP: ${{ secrets.VPS_IP }}
      GITHUB_TOKEN_FILE: ~/github_token
      APP_NAME: ${{ github.event.repository.name }}  # Define the application name as the repository name
      WORKING_FOLDER: $HOME/${{ github.event.repository.name }}  # Define the working directory as ~/repo-name      
      OLD_WORKING_FOLDER: $HOME/${{ github.event.repository.name }}_old_${{ github.run_number }} # Define the old working directory with run number
      NEW_WORKING_FOLDER: $HOME/${{ github.event.repository.name }}_new_${{ github.run_number }} # Define the new working directory with run number

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Checkout the code so runner can access the repo files
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure SSH (on GitHub Actions runner)
        run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.VPS_CICD_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "StrictHostKeyChecking no" > ~/.ssh/config
  
                    
      - name: Transfer GITHUB_TOKEN to VPS
        run: |
            ssh $USER@$VPS_IP "echo '${{ secrets.GITHUB_TOKEN }}' > $GITHUB_TOKEN_FILE"
    
      - name: Clean up NEW_WORKING_FOLDER if it already exists # can happen for re-run from github dashboard
        run: ssh $USER@$VPS_IP "rm -rf $NEW_WORKING_FOLDER"


      - name: Clone Repository on VPS
        run: |
          ssh $USER@$VPS_IP "
            export GITHUB_TOKEN=$(cat $GITHUB_TOKEN_FILE)
            git clone https://${{ github.repository_owner }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} $NEW_WORKING_FOLDER
          "

      - name: Delete GITHUB_TOKEN from VPS
        run: |
            ssh $USER@$VPS_IP "rm $GITHUB_TOKEN_FILE"

      - name: Install dependencies on VPS
        run: ssh $USER@$VPS_IP "cd $NEW_WORKING_FOLDER && npm install"  # Install dependencies using npm on the VPS
    

      - name: Run tests on VPS
        run: ssh $USER@$VPS_IP "cd $NEW_WORKING_FOLDER && npm run test -- --run"  # Run tests in non-watch mode on the VPS
    

      - name: Build application on VPS
        run: ssh $USER@$VPS_IP "cd $NEW_WORKING_FOLDER && NODE_ENV=production npm run build"  # Build the application using npm on the VPS

      - name: Stop application with PM2 (if running)
        run: |
          ssh $USER@$VPS_IP "
            if npx pm2 list | grep -q '${{ env.APP_NAME }}'; then
              npx pm2 stop '${{ env.APP_NAME }}';
            fi
          "

      - name: Move WORKING_FOLDER to OLD_WORKING_FOLDER
        run: ssh $USER@$VPS_IP "
          if [ -d '$WORKING_FOLDER' ]; then
            mv '$WORKING_FOLDER' '$OLD_WORKING_FOLDER';
          fi"
        
      - name: Move NEW_WORKING_FOLDER to WORKING_FOLDER
        run: ssh $USER@$VPS_IP "mv $NEW_WORKING_FOLDER $WORKING_FOLDER"  # Move the new working folder to the working folder on the VPS

      - name: Restart application with PM2
        run: | 
          ssh $USER@$VPS_IP "
            if npx pm2 list | grep -q '${{ env.APP_NAME }}'; then
              npx pm2 restart '${{ env.APP_NAME }}';
            else
              npx pm2 start npm --name '${{ env.APP_NAME }}' -- run start;
            fi
            npx pm2 save
          "

